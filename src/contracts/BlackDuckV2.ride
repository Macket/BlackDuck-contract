{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


# --- Scenario ---
#
# Make game (providing ranges and commit for randoms)
# Take game (providing randoms)
#
# Step 1 - maker reveals randoms (obligatory) and replaces one duck (optional)
# Step 2 - taker replaces one duck (optional)
#
# Step 3 - taker commits order
# Step 4 - maker sets order
# Step 5 - taker reveals order
#
# Get prize
#

# Mainnet
# let farmingAddress = base58'3PAETTtuW7aSiyKtn9GuML3RgtV1xdq1mQW'
# let rarityProviderAddress = base58'3PMSJXA6nm5AsB8Kr2h1uW2mLrCmb57kpwA'

# let eggsAssetId = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'

# Testnet
let farmingAddress = base58'3NBznG19rEYUAcnukTRTtwJHBVKQLbobVdC'
let rarityProviderAddress = base58'3NCman4dCzk1HWWU4DPTr5rsbhvuUCwwUZh'

let eggsAssetId = base58'AjXHBGsVDeXETQPk3qH4CPbZdfXPyNo5XoBx7jVbtwWG'


let SLOTS = 10
let WAITING = 8
let stepDuration = 5

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func getNextGameId() = {
  let nextId = tryGetInteger("nextGameId")
  if (nextId == 0) then 1 else nextId
}

func getPlayerCurrentGameKey(playerAddress: String) = {
    playerAddress + "_currentGame"
}

func getPlayerCurrentGame(playerAddress: String) = {
    tryGetInteger(getPlayerCurrentGameKey(playerAddress))
}

func getSlotKey(slot: Int) = {
    "slot" + toString(slot)
}

func getSlot(slot: Int) = {
    tryGetInteger(getSlotKey(slot))
}

func getPlayerRoleKey(gameId: Int, playerAddress: String) = {
    "game" + toString(gameId) + "_" + playerAddress
}

func getPlayerRole(gameId: Int, playerAddress: String) = {
    tryGetString(getPlayerRoleKey(gameId, playerAddress))
}

func getMakerKey(gameId: Int) = {
    "game" + toString(gameId) + "_maker"
}

func getMaker(gameId: Int) = {
    tryGetString(getMakerKey(gameId))
}

func getTakerKey(gameId: Int) = {
    "game" + toString(gameId) + "_taker"
}

func getTaker(gameId: Int) = {
    tryGetString(getTakerKey(gameId))
}

func getTakerSkipReplaceKey(gameId: Int) = {
    "game" + toString(gameId) + "_taker_skipReplace"
}

func getTakerSkipReplace(gameId: Int) = {
    tryGetBoolean(getTakerSkipReplaceKey(gameId))
}

func getBetKey(gameId: Int) = {
    "game" + toString(gameId) + "_bet"
}

func getBet(gameId: Int) = {
    tryGetInteger(getBetKey(gameId))
}

func getWaitingExpirationHeightKey(gameId: Int) = {
    "game" + toString(gameId) + "_waitingExpirationHeight"
}

func getWaitingExpirationHeight(gameId: Int) = {
    tryGetInteger(getWaitingExpirationHeightKey(gameId))
}

func getExpirationHeightKey(gameId: Int) = {
    "game" + toString(gameId) + "_expirationHeight"
}

func getExpirationHeight(gameId: Int) = {
    tryGetInteger(getExpirationHeightKey(gameId))
}

func getRangesKey(gameId: Int) = {
    "game" + toString(gameId) + "_ranges"
}

func getRanges(gameId: Int) = {
    tryGetString(getRangesKey(gameId))
}

func getMakerRandomsCommitKey(gameId: Int) = {
    "game" + toString(gameId) + "_maker_randomsCommit"
}

func getMakerRandomsCommit(gameId: Int) = {
    tryGetString(getMakerRandomsCommitKey(gameId))
}

func getRandomsKey(gameId: Int, playerRole: String) = {
    "game" + toString(gameId) + "_" + playerRole + "_randoms"
}

func getRandoms(gameId: Int, playerRole: String) = {
    tryGetString(getRandomsKey(gameId, playerRole))
}

func getStepKey(gameId: Int) = {
    "game" + toString(gameId) + "_step"
}

func getStep(gameId: Int) = {
    tryGetInteger(getStepKey(gameId))
}

func getRaritiesKey(gameId: Int, playerRole: String) = {
    "game" + toString(gameId) + "_" + playerRole + "_rarities"
}

func getRarities(gameId: Int, playerRole: String) = {
    tryGetString(getRaritiesKey(gameId, playerRole))
}

func getReplacedPositionKey(gameId: Int, playerRole: String) = {
    "game" + toString(gameId) + "_" + playerRole + "_replacedPosition"
}

func getReplacedPosition(gameId: Int, playerRole: String) = {
    tryGetInteger(getReplacedPositionKey(gameId, playerRole))
}

func getDuckIdKey(gameId: Int, playerRole: String) = {
    "game" + toString(gameId) + "_" + playerRole + "_duckId"
}

func getDuckId(gameId: Int, playerRole: String) = {
    tryGetString(getDuckIdKey(gameId, playerRole))
}

func getTakerOrderCommitKey(gameId: Int) = {
    "game" + toString(gameId) + "_taker_orderCommit"
}

func getTakerOrderCommit(gameId: Int) = {
    tryGetString(getTakerOrderCommitKey(gameId))
}

func getOrderKey(gameId: Int, playerRole: String) = {
    "game" + toString(gameId) + "_" + playerRole + "_order"
}

func getOrder(gameId: Int, playerRole: String) = {
    tryGetString(getOrderKey(gameId, playerRole))
}

func getPlayerResultKey(gameId: Int, playerAddress: String) = {
    "game" + toString(gameId) + "_" + playerAddress + "_result"
}

func getPlayerResult(gameId: Int, playerAddress: String) = {
    tryGetString(getPlayerResultKey(gameId, playerAddress))
}

func getPlayerPrizeKey(gameId: Int, playerAddress: String) = {
    "game" + toString(gameId) + "_" + playerAddress + "_prize"
}

func getPlayerPrize(gameId: Int, playerAddress: String) = {
    tryGetInteger(getPlayerPrizeKey(gameId, playerAddress))
}

# --- STATS ---

func getPlayerWinsKey(playerAddress: String) = {
    playerAddress + "_wins"
}

func getPlayerWins(playerAddress: String) = {
    tryGetInteger(getPlayerWinsKey(playerAddress))
}

func getPlayerLosesKey(playerAddress: String) = {
    playerAddress + "_loses"
}

func getPlayerLoses(playerAddress: String) = {
    tryGetInteger(getPlayerLosesKey(playerAddress))
}

func getPlayerDrawsKey(playerAddress: String) = {
    playerAddress + "_draws"
}

func getPlayerDraws(playerAddress: String) = {
    tryGetInteger(getPlayerDrawsKey(playerAddress))
}

func getPlayerPnLKey(playerAddress: String) = {
    playerAddress + "_PnL"
}

func getPlayerPnL(playerAddress: String) = {
    tryGetInteger(getPlayerPnLKey(playerAddress))
}

func getGamesPlayedKey() = {
    "gamesPlayed"
}

func getGamesPlayed() = {
    tryGetInteger(getGamesPlayedKey())
}

# -----------------------------

func getFarmingPower(address: String, assetId: String) = {
    match getInteger(Address(farmingAddress), "address_" + address + "_asset_" + assetId + "_farmingPower") {
        case fp:Int => fp
        case _ => 0
    }
}

func checkDuckOwner(ownerAddress: Address, assetId: ByteVector) = {
    assetBalance(ownerAddress, assetId) > 0 || getFarmingPower(toBase58String(ownerAddress.bytes), toBase58String(assetId)) > 0
}

# -------

let RANGES = [
  [2, 3, 4, 5, 6, 7, 8, 9],
  [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
  [21, 22, 23, 24, 25, 26, 27, 28, 30],
  [31, 33, 35, 37, 40],
  [44, 50, 57, 70, 100]
]

func getRandomRarity(random: Int, range: Int) = {
  let randomIdx = random % size(RANGES[range - 1])

  RANGES[range - 1][randomIdx]
}

# -------

func getScore(a: Int, b: Int) = {
    if (a > b) then 1 else if (a < b) then -1 else 0
}

func getWinner(gameId: Int, takerOrderStr: String, expired: Boolean) = {
  let step = getStep(gameId)

  if (expired) then {
    let expirationHeight = getExpirationHeight(gameId)

    if (step == 0) then throw("Game is not started")
    else if (expirationHeight > height) then throw("Game is not expired")
    else if (step == 1 || step == 4) then "taker" else "maker"
  } else {
    let mo = split(getOrder(gameId, "maker"), "|")
    let makerOrder = [parseIntValue(mo[0]), parseIntValue(mo[1]), parseIntValue(mo[2])]
    let to = split(takerOrderStr, "|")
    let takerOrder = [parseIntValue(to[0]), parseIntValue(to[1]), parseIntValue(to[2])]


    let mr = split(getRarities(gameId, "maker"), "|")
    let makerRarities = [parseIntValue(mr[0]), parseIntValue(mr[1]), parseIntValue(mr[2])]
    let tr = split(getRarities(gameId, "taker"), "|")
    let takerRarities = [parseIntValue(tr[0]), parseIntValue(tr[1]), parseIntValue(tr[2])]

    let makerScore = getScore(makerRarities[makerOrder[0] - 1], takerRarities[takerOrder[0] - 1]) +
    getScore(makerRarities[makerOrder[1] - 1], takerRarities[takerOrder[1] - 1]) +
    getScore(makerRarities[makerOrder[2] - 1], takerRarities[takerOrder[2] - 1])

    if (makerScore > 0) then "maker" else if (makerScore < 0) then "taker" else "draw"
  }
}

func getGameResult(gameId: Int, takerOrder: String, expired: Boolean) = {
    let bet = getBet(gameId)
    let makerAddress = getMaker(gameId)
    let takerAddress = getTaker(gameId)

    let winner = getWinner(gameId, takerOrder, expired)
    let winnerAddress = if (winner == "maker") then makerAddress else if (winner == "taker") then takerAddress else ""
    let loserAddress = if (winner == "taker") then makerAddress else if (winner == "maker") then takerAddress else ""

    if (winnerAddress != "") then {
        [
            IntegerEntry(getPlayerCurrentGameKey(winnerAddress), 0),
            IntegerEntry(getPlayerCurrentGameKey(loserAddress), 0),
            IntegerEntry(getPlayerWinsKey(winnerAddress), getPlayerWins(winnerAddress) + 1),
            IntegerEntry(getPlayerLosesKey(loserAddress), getPlayerLoses(loserAddress) + 1),
            StringEntry(getPlayerResultKey(gameId, winnerAddress), "win"),
            StringEntry(getPlayerResultKey(gameId, loserAddress), "lose"),
            IntegerEntry(getPlayerPrizeKey(gameId, winnerAddress), bet),
            IntegerEntry(getPlayerPrizeKey(gameId, loserAddress), -bet),
            IntegerEntry(getPlayerPnLKey(winnerAddress), getPlayerPnL(winnerAddress) + bet),
            IntegerEntry(getPlayerPnLKey(loserAddress), getPlayerPnL(loserAddress) - bet),
            ScriptTransfer(Address(winnerAddress.fromBase58String()), bet * 2, eggsAssetId)
        ]
    } else {
        [
            IntegerEntry(getPlayerCurrentGameKey(makerAddress), 0),
            IntegerEntry(getPlayerCurrentGameKey(takerAddress), 0),
            IntegerEntry(getPlayerDrawsKey(makerAddress), getPlayerDraws(makerAddress) + 1),
            IntegerEntry(getPlayerDrawsKey(takerAddress), getPlayerDraws(takerAddress) + 1),
            StringEntry(getPlayerResultKey(gameId, makerAddress), "draw"),
            StringEntry(getPlayerResultKey(gameId, takerAddress), "draw"),
            IntegerEntry(getPlayerPrizeKey(gameId, makerAddress), 0),
            IntegerEntry(getPlayerPrizeKey(gameId, takerAddress), 0),
            ScriptTransfer(Address(makerAddress.fromBase58String()), bet, eggsAssetId),
            ScriptTransfer(Address(takerAddress.fromBase58String()), bet, eggsAssetId)
        ]
    }
}

@Callable(i)
func makeGame(slot: Int, worstRange: Int, mediumRange: Int, bestRange: Int, randomsCommit: String) = {
  let callerAddress = toBase58String(i.caller.bytes)
  let slotGameId = getSlot(slot)
  let payment = i.payments[0].value()
  let eggs = payment.amount
  let gameId = getNextGameId()

  if (getPlayerCurrentGame(callerAddress) != 0) then throw("You already have an active game")
  else if (slot < 0 || slot >= SLOTS) then throw("Invalid slot")
  else if (slotGameId != 0) then throw("This slot is busy")
  else if (payment.assetId != eggsAssetId) then throw("You can attach only EGGs with the following asset id - " + eggsAssetId.toBase58String())
  else if (eggs != 10000) then throw("Bet must be 0.0001 EGG during beta test")
  else if (worstRange < 1 || worstRange > 5) then throw("Invalid range for the worst duck")
  else if (mediumRange < 1 || mediumRange > 5) then throw("Invalid range for the medium duck")
  else if (bestRange < 1 || bestRange > 5) then throw("Invalid range for the best duck")
  else if (mediumRange < worstRange) then throw("The medium range can't be less than the worst one")
  else if (bestRange < mediumRange) then throw("The best range can't be worse than the medium one")
  else {
      [
        IntegerEntry(getPlayerCurrentGameKey(callerAddress), gameId),
        StringEntry(getMakerKey(gameId), callerAddress),
        StringEntry(getPlayerRoleKey(gameId, callerAddress), "maker"),
        IntegerEntry(getBetKey(gameId), eggs),
        StringEntry(getRangesKey(gameId), toString(worstRange) + "|" + toString(mediumRange) + "|" + toString(bestRange)),
        StringEntry(getMakerRandomsCommitKey(gameId), randomsCommit),
        IntegerEntry(getWaitingExpirationHeightKey(gameId), height + WAITING),
        IntegerEntry(getSlotKey(slot), gameId),
        IntegerEntry("nextGameId", gameId + 1)
      ]
  }
}

@Callable(i)
func takeGame(slot: Int, random1: Int, random2: Int, random3: Int, random4: Int, random5: Int, random6: Int, skipReplace: Boolean) = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getSlot(slot)
    let payment = i.payments[0].value()
    let randoms = toString(random1) + "|" + toString(random2) + "|" + toString(random3) + "|" + toString(random4) + "|" + toString(random5) + "|" + toString(random6)

    if (getPlayerCurrentGame(callerAddress) != 0) then throw("You already have an active game")
    else if (slot < 0 || slot >= SLOTS) then throw("Invalid slot")
    else if (getSlot(slot) == 0) then throw("This slot is empty")
    else if (payment.assetId != eggsAssetId) then throw("You can attach only EGGs with the following asset id - " + eggsAssetId.toBase58String())
    else if (payment.amount != getBet(gameId)) then throw("Insufficient eggs amount")
    else if (getWaitingExpirationHeight(gameId) <= height) then throw("This game is expired")
    else if (random1 < 0 || random1 > 1000000000000) then throw("Invalid random1")
    else if (random2 < 0 || random2 > 1000000000000) then throw("Invalid random2")
    else if (random3 < 0 || random3 > 1000000000000) then throw("Invalid random3")
    else if (random4 < 0 || random4 > 1000000000000) then throw("Invalid random4")
    else if (random5 < 0 || random5 > 1000000000000) then throw("Invalid random5")
    else if (random6 < 0 || random6 > 1000000000000) then throw("Invalid random6")
    else {
        [
            IntegerEntry(getPlayerCurrentGameKey(callerAddress), gameId),
            StringEntry(getTakerKey(gameId), callerAddress),
            StringEntry(getPlayerRoleKey(gameId, callerAddress), "taker"),
            StringEntry(getRandomsKey(gameId, "taker"), randoms),
            BooleanEntry(getTakerSkipReplaceKey(gameId), skipReplace),
            IntegerEntry(getStepKey(gameId), 1),
            IntegerEntry(getExpirationHeightKey(gameId), height + stepDuration),
            IntegerEntry(getSlotKey(slot), 0),
            IntegerEntry("gamesPlayed", getGamesPlayed() + 1)
        ]
    }
}

@Callable(i)
func kickGame(slot: Int) = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getSlot(slot)
    let maker = getMaker(gameId)

    if (slot < 0 || slot >= SLOTS) then throw("Invalid slot")
    else if (gameId == 0) then throw("Slot is empty")
    else if (callerAddress != maker && getWaitingExpirationHeight(gameId) > height) then throw("Waiting is not finished yet")
    else {
        [
            IntegerEntry(getPlayerCurrentGameKey(maker), 0),
            IntegerEntry(getSlotKey(slot), 0),
            ScriptTransfer(Address(maker.fromBase58String()), getBet(gameId), eggsAssetId)
        ]
    }
}

@Callable(i)
func revealRandomsAndReplaceMaker(random1: Int, random2: Int, random3: Int, random4: Int, random5: Int, random6: Int, salt: String, replacePosition: Int, duckId: String) = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getPlayerCurrentGame(callerAddress)
    let playerRole = getPlayerRole(gameId, callerAddress)
    let step = getStep(gameId)
    let rangesRaw = split(getRanges(gameId), "|")
    let ranges = [parseIntValue(rangesRaw[0]), parseIntValue(rangesRaw[1]), parseIntValue(rangesRaw[2])]

    let makerRandomsCommit = getMakerRandomsCommit(gameId)
    let makerRandomsStr = toString(random1) + "|" + toString(random2) + "|" + toString(random3) + "|" + toString(random4) + "|" + toString(random5) + "|" + toString(random6)
    let takerRandoms = split(getRandoms(gameId, "taker"), "|")

    let rarityToReplace = if (replacePosition == 1 || replacePosition == 2 || replacePosition == 3) then {
      strict invokeRes = invoke(Address(rarityProviderAddress), "getAssetRarity", [duckId], [])
      let rarity = match invokeRes {
          case r : Int => r
          case _ => throw("Incorrect invoke result")
      }

      let replaceRange = ranges[replacePosition - 1]

      if (!checkDuckOwner(i.caller, duckId.fromBase58String())) then throw("Asset " + duckId + " doesn't belong to you")
      else if (replaceRange < 5 && (rarity > replaceRange * 10 || rarity <= (replaceRange - 1) * 10)) then throw("Duck doesn't fit rarity range")
      else if (replaceRange == 5 && rarity <= 40) then throw("Duck doesn't fit rarity replaceRange")
      else rarity
    } else {
      0
    }

    let worstRarityMaker = if (replacePosition == 1) then rarityToReplace else getRandomRarity(random1 + parseIntValue(takerRandoms[0]), ranges[0])
    let mediumRarityMaker = if (replacePosition == 2) then rarityToReplace else getRandomRarity(random2 + parseIntValue(takerRandoms[1]), ranges[1])
    let bestRarityMaker = if (replacePosition == 3) then rarityToReplace else getRandomRarity(random3 + parseIntValue(takerRandoms[2]), ranges[2])

    let worstRarityTaker = getRandomRarity(random4 + parseIntValue(takerRandoms[3]), ranges[0])
    let mediumRarityTaker = getRandomRarity(random5 + parseIntValue(takerRandoms[4]), ranges[1])
    let bestRarityTaker = getRandomRarity(random6 + parseIntValue(takerRandoms[5]), ranges[2])

    let nextStep = if (getTakerSkipReplace(gameId)) then step + 2 else step + 1

    if (gameId == 0) then throw("You don't have an active game")
    else if (playerRole != "maker") then throw("Only maker can call this method")
    else if (step < 1) then throw("Game is not started")
    else if (step > 1) then throw("This step is finished")
    else if (random1 < 0 || random1 > 1000000000000) then throw("Invalid random1")
    else if (random2 < 0 || random2 > 1000000000000) then throw("Invalid random2")
    else if (random3 < 0 || random3 > 1000000000000) then throw("Invalid random3")
    else if (random4 < 0 || random4 > 1000000000000) then throw("Invalid random4")
    else if (random5 < 0 || random5 > 1000000000000) then throw("Invalid random5")
    else if (random6 < 0 || random6 > 1000000000000) then throw("Invalid random6")
    else if (toBase58String(sha256(toBytes(makerRandomsStr + salt))) != makerRandomsCommit) then throw("Randoms don't match commit")
    else {
        [
            StringEntry(getRandomsKey(gameId, "maker"), makerRandomsStr),
            StringEntry(getRaritiesKey(gameId, "maker"), toString(worstRarityMaker) + "|" + toString(mediumRarityMaker) + "|" + toString(bestRarityMaker)),
            IntegerEntry(getReplacedPositionKey(gameId, "maker"), replacePosition),
            StringEntry(getDuckIdKey(gameId, "maker"), duckId),
            StringEntry(getRaritiesKey(gameId, "taker"), toString(worstRarityTaker) + "|" + toString(mediumRarityTaker) + "|" + toString(bestRarityTaker)),
            IntegerEntry(getStepKey(gameId), nextStep),
            IntegerEntry(getExpirationHeightKey(gameId), height + stepDuration)
        ]
    }
}

@Callable(i)
func replaceTaker(replacePosition: Int, duckId: String) = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getPlayerCurrentGame(callerAddress)
    let playerRole = getPlayerRole(gameId, callerAddress)
    let step = getStep(gameId)
    let rangesRaw = split(getRanges(gameId), "|")
    let ranges = [parseIntValue(rangesRaw[0]), parseIntValue(rangesRaw[1]), parseIntValue(rangesRaw[2])]

    let range = ranges[replacePosition - 1]

    strict invokeRes = invoke(Address(rarityProviderAddress), "getAssetRarity", [duckId], [])
    let replaceRarity = match invokeRes {
        case r : Int => r
        case _ => throw("Incorrect invoke result")
    }

    let rarities = split(getRarities(gameId, "taker"), "|")
    let newRarities = nil :+
    (if (replacePosition == 1) then toString(replaceRarity) else rarities[0]) :+
    (if (replacePosition == 2) then toString(replaceRarity) else rarities[1]) :+
    (if (replacePosition == 3) then toString(replaceRarity) else rarities[2])

    if (gameId == 0) then throw("You don't have an active game")
    else if (playerRole != "taker") then throw("Only taker can call this method")
    else if (replacePosition != 1 && replacePosition != 2 && replacePosition != 3) then throw("Invalid replace position - " + toString(replacePosition)  + ". Must be 1, 2 or 3")
    else if (getExpirationHeight(gameId) == 0) then throw("Game is not started")
    else if (step < 2) then throw("This step is not started")
    else if (step > 2) then throw("This step is finished")
    else if (!checkDuckOwner(i.caller, duckId.fromBase58String())) then throw("Asset " + duckId + " doesn't belong to you")
    else if (range < 5 && (replaceRarity > range * 10 || replaceRarity <= (range - 1) * 10)) then throw("Duck doesn't fit rarity range")
    else if (range == 5 && replaceRarity <= 40) then throw("Duck doesn't fit rarity range")
    else {
        [
            StringEntry(getRaritiesKey(gameId, "taker"), newRarities[0] + "|" + newRarities[1] + "|" + newRarities[2]),
            IntegerEntry(getReplacedPositionKey(gameId, "taker"), replacePosition),
            StringEntry(getDuckIdKey(gameId, "taker"), duckId),
            IntegerEntry(getStepKey(gameId), step + 1),
            IntegerEntry(getExpirationHeightKey(gameId), height + stepDuration)
        ]
    }
}

@Callable(i)
func commitOrderTaker(orderCommit: String) = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getPlayerCurrentGame(callerAddress)
    let playerRole = getPlayerRole(gameId, callerAddress)
    let step = getStep(gameId)

    if (gameId == 0) then throw("You don't have an active game")
    else if (playerRole != "taker") then throw("Only taker can call this method")
    else if (step < 3) then throw("This step is not started")
    else if (step > 3) then throw("This step is finished")
    else {
      [
          StringEntry(getTakerOrderCommitKey(gameId), orderCommit),
          IntegerEntry(getStepKey(gameId), step + 1),
          IntegerEntry(getExpirationHeightKey(gameId), height + stepDuration)
      ]
    }
}

@Callable(i)
func setOrderMaker(order: String) = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getPlayerCurrentGame(callerAddress)
    let playerRole = getPlayerRole(gameId, callerAddress)
    let step = getStep(gameId)

    if (gameId == 0) then throw("You don't have an active game")
    else if (playerRole != "maker") then throw("Only maker can call this method")
    else if (step < 4) then throw("This step is not started")
    else if (step > 4) then throw("This step is finished")
    else if(order != "1|2|3" && order != "1|3|2" && order != "2|1|3" && order != "2|3|1" && order != "3|1|2" && order != "3|2|1") then throw("Invalid order data")
    else {
      [
          StringEntry(getOrderKey(gameId, playerRole), order),
          IntegerEntry(getStepKey(gameId), step + 1),
          IntegerEntry(getExpirationHeightKey(gameId), height + stepDuration)
      ]
    }
}

@Callable(i)
func revealOrderTaker(order: String, salt: String) = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getPlayerCurrentGame(callerAddress)
    let playerRole = getPlayerRole(gameId, callerAddress)
    let step = getStep(gameId)

    if (gameId == 0) then throw("You don't have an active game")
    else if (playerRole != "taker") then throw("Only taker can call this method")
    else if (step < 5) then throw("This step is not started")
    else if(order != "1|2|3" && order != "1|3|2" && order != "2|1|3" && order != "2|3|1" && order != "3|1|2" && order != "3|2|1") then throw("Invalid order data")
    else if (toBase58String(sha256(toBytes(order + salt))) != getTakerOrderCommit(gameId)) then throw("Reveal doesn't match commit")
    else {
      getGameResult(gameId, order, false) ++ [StringEntry(getOrderKey(gameId, playerRole), order)]
    }
}

@Callable(i)
func getPrizeExpired() = {
    let callerAddress = toBase58String(i.caller.bytes)
    let gameId = getPlayerCurrentGame(callerAddress)

    if (gameId == 0) then throw("You don't have an active game")
    else {
        getGameResult(gameId, "", true)
    }

}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
